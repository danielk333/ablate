variables:
  #Change pip's cache directory to be inside 
  # the project directory since we can
  # only cache local items.
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  
  #Use a gitlab variable to securly store the 
  # user token used to upload to PyPI
  PYPI_TOKEN: $PYPI_TOKEN

#Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .cache/pip
    - .venv


stages:
  - quality
  - tests
  - publish


# #
# Template information: 
#   https://docs.gitlab.com/ee/ci/yaml/yaml_specific_features.html
# #

#Template script for all jobs that installs
# the package into a virtualenv and also
# installs the develop-extras needed
.install-deps-template: &install-deps
  - python -V
  - pip install virtualenv
  - pip install -U pip
  - virtualenv venv
  - source venv/bin/activate
  - pip install .
  - pip install .[develop]


#Template for testing on python images, 
# extend this for each python-platform 
# the package is intended to work on
.test-template: &python-test
  before_script:
    - *install-deps # execute script in alias
  stage: tests
  script: 
    - coverage run -m pytest > .pytest_report
    - coverage report -m > .coverage_report
  #Save the reports for each platform
  # so that its easier to troubleshoot
  artifacts:
    paths:
      - .pytest_report
      - .coverage_report
    when: always
    expire_in: 1 week


#Template for testing on OS images, extend this
# for each os the package is intended to work on
.test-template: &os-test
  stage: tests
  script: 
    - *install-deps # execute script in alias
    - coverage run -m pytest > .pytest_report
    - coverage report -m > .coverage_report
  #Save the reports for each platform
  # so that its easier to troubleshoot
  artifacts:
    paths:
      - .pytest_report
      - .coverage_report
    when: always
    expire_in: 1 week


#Run flake8 to check code-style adherance to PEP8
check-flake8:
  <<: *install-deps # Merge the contents of the alias
  image: python:3.9.7
  stage: quality
  script: 
    - python -m flake8 > .flake8_report
  #Save flake-report for use when working on
  # next update
  artifacts:
    paths:
      - .flake8_report
    when: always
    expire_in: 1 week


##########################
## Platforms to test on ##
#
# 
#Official language images, look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
# And use the `python-test` alias
# 
#To test on OS distributions, find the OS images, e.g:
# https://hub.docker.com/_/ubuntu
# and use the `os-test` alias to allow for specific 
# os-dependancy setup (e.g. gcc or gfortran) before 
# install of the pacakge trough `before_script`
# 

python3.7:
  <<: *python-test # Merge the contents of the alias
  image: python:3.7

python3.9:
  <<: *python-test # Merge the contents of the alias
  image: python:3.9


#Compile documentation for publication
docs:
  before_script:
    - *install-deps # execute script in alias
  image: python:3.9.7
  stage: publish
  script:
    - cd docs
    - make html
  artifacts:
    paths:
      - docs/build/html

#Build and check integrity of distribution
package:
  before_script:
    - *install-deps # execute script in alias
  image: python:3.9.7
  stage: publish
  script:
    - python -m build
    - python -m twine check dist/*
  artifacts:
    paths:
      - dist/*

#Publish package on PyPI if
# the commit has a version tag
#upload:
#  before_script:
#    - *install-deps # execute script in alias
#  image: python:3.9.7
#  stage: publish
#  script:
#    - >
#      TWINE_USERNAME=__token__
#      TWINE_PASSWORD=$PYPI_TOKEN
#      python -m twine upload dist/*
#  rules:
#    - if: $CI_COMMIT_TAG
